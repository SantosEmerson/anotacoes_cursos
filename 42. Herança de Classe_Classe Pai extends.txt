<<<<<<<<<<<<<<<<< 42. Heran√ßa de Classe >>>>>>>>>>>>>>>>>>>

Considere a defini√ß√£o da classe pai Veiculo mostrada abaixo, que se refere a todos os tipos de ve√≠culo dispon√≠veis em uma concession√°ria:

// Defini√ß√£o da classe
class Veiculo {
    constructor(modelo, marca, ano) {
        this.modelo = modelo;
        this.marca = marca;
        this.ano = ano;
    }
    marcaEAno() {
        return `Este ve√≠culo √© de ${this.ano}, da marca ${this.marca}`;
    }
}
Agora, imagine que voc√™ queira criar uma classe Carro, que seja filha da classe Veiculo. Qual seria a melhor maneira de fazer isso?


class Carro extends Veiculo {
    
}
==========================================

Ô∏èÔ∏èüìÑ Classes Escritor e Usu√°rio

Defina uma classe Escritor, que contenha os seguintes m√©todos de inst√¢ncia:

obterNomeCompleto(), que retorna o nome completo do Escritor.
podeVotar(), que retorna true quando a idade do Escritor √© de 16 anos ou mais, e false caso contr√°rio.
publicarArtigo(), que exibe no console a seguinte string: "Artigo publicado".
Observe a classe Usuario existente, e certifique-se de n√£o duplicar c√≥digo. Para isso, fa√ßa com que a classe Escritor seja filha da classe Usuario.

// Defini√ß√£o da classe Usuario
class Usuario {
    constructor(nome, sobrenome, idade) {
        this.nome = nome;
        this.sobrenome = sobrenome;
        this.idade = idade;
    }
    
    obterNomeCompleto() {
        return `${this.nome} ${this.sobrenome}`;
    }
    
    podeVotar() {
        return this.idade >= 16;
    }
}

class Escritor extends Usuario {
    publicarArtigo() {
        return "Artigo publicado"
    }
}
// Insira aqui a defini√ß√£o da classe Escritor.
// Lembre-se de usar heran√ßa e de criar o m√©todo
// de inst√¢ncia publicarArtigo().
==========================================

üìÑ Heran√ßa de classe em lista de tarefas

Imagine que voc√™ esteja criando um aplicativo de lista de tarefas. Nesse aplicativo, √© necess√°rio cadastrar dois tipos de tarefas, cada uma implementada em uma classe diferente:

Tarefa, que √© uma tarefa que voc√™ deseja realizar futuramente.
TarefaMarcar, que √© uma tarefa que pode ser marcada como conclu√≠da ou n√£o conclu√≠da.
As classes Tarefa e TarefaMarcar compartilham algumas funcionalidades, mas a classe TarefaMarcar deve ter uma funcionalidade extra chamada marcarComoConcluida(). Esse m√©todo de inst√¢ncia deve marcar a tarefa como conclu√≠da.

No c√≥digo que voc√™ est√° recebendo, a classe Tarefa j√° est√° criada. Crie a classe TarefaMarcar, que ser√° filha de Tarefa, e dentro dela crie o m√©todo de inst√¢ncia marcarComoConcluida().

Notas:

Uma classe filha tamb√©m pode acessar vari√°veis ‚Äã‚Äãde inst√¢ncia de sua classe pai.
Para marcar a tarefa como conclu√≠da, atribua true √† vari√°vel de inst√¢ncia estaCompleta.

// Classe Tarefa
class Tarefa {
    constructor(titulo, estaCompleta) {
        this.titulo = titulo;
        this.estaCompleta = estaCompleta;
    }

    obterFormatacao() {
        let status = "";
        if (this.estaCompleta) {
            status = "‚úÖ";
        } else {
            status = "‚è≥";
        }
        return `[${status}] ${this.titulo}`;
    }
}

// Implemente a classe TarefaMarcar
// N√£o se esque√ßa de herdar da classe Tarefa
class TarefaMarcar extends Tarefa{
    // Implemente o m√©todo de inst√¢ncia marcarComoConcluida()
    marcarComoConcluida() {
        return true
    }
}

// Uso das classes
let tarefa = new Tarefa("Aprendizagem de Programa√ß√£o", false);
console.log(tarefa.obterFormatacao());

let tarefaMarcar = new TarefaMarcar("Aspirar o ch√£o", false);
console.log(tarefaMarcar.obterFormatacao());

tarefaMarcar.marcarComoConcluida();

console.log(tarefaMarcar); // estaCompleta deve ser true
console.log(tarefaMarcar.obterFormatacao());

================================

‚ñ∂Ô∏è Sobrescrevendo m√©todos da classe pai
Considere a defini√ß√£o da seguinte classe pai, chamada Veiculos, que cont√©m um m√©todo de inst√¢ncia chamado marcaEAno():

// Defini√ß√£o da classe
class Veiculos {
    constructor(modelo, marca, ano) {
        this.modelo = modelo;
        this.marca = marca;
        this.ano = ano;
    }
    marcaEAno() {
        return `Este ve√≠culo √© de ${this.ano}, da marca ${this.marca}`;
    }
}
Agora, imagine que voc√™ queria criar uma classe filha, chamada Carro, que vai sobrescrever o m√©todo marcaEAno().
Qual seria a maneira correta de fazer isso?

class Carro extends Veiculos {
    marcaEAno() {
        return `Este carro √© de ${this.ano}, da marca ${this.marca}`;
    }
}
================================================
Ô∏èÔ∏èüìÑ Sobrescrevendo um m√©todo da classe Usu√°rio

Defina uma classe Escritor, filha da classe Usuario, que contenha os seguintes m√©todos de inst√¢ncia:

obterNomeCompleto(), que retorna uma string contendo o nome completo do escritor, adicionando ao final um caractere de espa√ßo e o texto "[escritor]".
podeVotar(), que retorna true quando a idade √© de 16 anos ou mais, e false caso contr√°rio.
publicarArtigo(), que exibe no console o texto: "Artigo publicado".
Observe a classe Usuario existente, e certifique-se de fazer a heran√ßa de classe e sobrescrever o m√©todo que foi solicitado.

Seguem dois exemplos de retorno do m√©todo obterNomeCompleto() que voc√™ vai implementar:

a) Para o nome "Paulo" e sobrenome "Marques", o retorno ser√°: "Paulo Marques [escritor]"

b) Para o nome "Luis" e sobrenome "Vieira", o retorno ser√°: "Luis Vieira [escritor]"

// Classe Usuario
class Usuario {
    constructor(nome, sobrenome, idade) {
        this.nome = nome;
        this.sobrenome = sobrenome;
        this.idade = idade;
    }

    obterNomeCompleto() {
        return `${this.nome} ${this.sobrenome}`;
    }

    podeVotar() {
        return this.idade >= 16;
    }
}
class Escritor extends Usuario {
    publicarArtigo() {
        return "Artigo publicado"
    }
}
// Implemente a classe Escritor
// Ela ser√° filha da classe Usuario


// Testando a classe
let escritora = new Escritor ("Helena", "Silva", 22);
console.log(escritora.obterNomeCompleto());
escritora.publicarArtigo();

=========================================
Ô∏èÔ∏èüìÑ Classes Gerente e Funcion√°rio

Complete a classe Gerente, filha da classe Funcionario, de forma que ela possua todos os m√©todos de sua classe pai, que s√£o:

obterNomeCompleto()
obterIniciais()
obterPosicao()
O m√©todo obterPosicao() da classe Gerente dever√° retornar a string:

"X √© o gerente"

onde X √© o primeiro nome do gerente.

Observe a classe Funcionario existente, e certifique-se de usar heran√ßa de classe.

// Defini√ß√£o da classe Funcionario
class Funcionario {
    constructor(nome, sobrenome, cargo) {
        this.nome = nome;
        this.sobrenome = sobrenome;
        this.cargo = cargo;
    }

    obterNomeCompleto() {
        return `${this.nome} ${this.sobrenome}`;
    }

    obterIniciais() {
        return this.nome[0] + this.sobrenome[0];
    }

    obterPosicao() {
        return `${this.nome} trabalha como ${this.cargo}`;
    }
}
class Gerente extends Funcionario {
     obterPosicao() {
        return `${this.nome} ${this.sobrenome} √© o gerente`
     }
}
// Defina aqui a classe Gerente
// Lembre-se de usar heran√ßa de classe


// Uso da classe Funcionario
let sueli = new Funcionario("Sueli", "Borges", "desenvolvedora");
console.log(sueli.obterNomeCompleto());
console.log(sueli.obterPosicao());

// Uso da classe Gerente
let carlos = new Gerente("Carlos", "Santos", "gerente");
console.log(carlos.obterNomeCompleto());
console.log(carlos.obterPosicao());